INTRODUCTION TO HTTP

Language used to communicate over the internet is Hyper Text Transfer Protocol

Set of rules that govern how two devices should communicate with each other over the internet






BUILDING A CASE FOR HTTP

There needs to be protocol in order for communication to be clear






HTTP REQUESTS USING TELNET

HTTP is a plain text protocol, which means that messages sent using HTTP are directly readable

Telnet is software used for connecting to and communicating with a remote device. Not limited to using HTTP

example:

telnet httpbin.org 80

// httpbin.org is a service specifically designed for testing http requests and seeing the resulting responses. Start by issuing telnet command, then name of host (domain name) we want to connect to, then port number. Port number indicates specific type of communication (http messaging in this case).

GET / HTTP/1.1
Host: httpbin.org

// get the root (fetch content at the root, rep by single /) using http protocol version 1.1. This line is called the request line. 
// Specify host again because the ip address we connected may have several hosts.

This whole request is like navigating to httpbin.org in your browser - it returns html



Moar example:

telnet httpbin.org 80

GET /xml HTTP/1.1
Host: httpbin.org

// gets the resource xml, exensible markup language






HTTP REQUEST FORMAT

HTTP requests begin with a request line. This starts with what's called the request method, GET (viewing) or POST (changing). Next is the resource's Uniform Resource Identifier. Then the protocol in use + / + version.

GET|POST [uri] HTTP/[version]

ex:
GET /xml HTTP/1.1


The next line begins with what's called the header section of the request. This communicates information related to the request being made, and can include all sorts of info.

[Header Name]: [Header Value]
(each on its own line)

ex:

Host: httpbin.org
User-Agent: telnet
Accept-Language: en-US

// Includes host (domain name). User-agent identifies the exact device making the request. Accept-language tells the server which language we prefer for the response.


Following the headers is a blank line

Following the blank line is the request body, or payload. If the headers refer to the information related to the request, the payload refers to the data being transferred in the request, if any. Data needs to be transferred when the purpose of the request is to change a resource on the server. Consider the example of using a form to edit the first name of a contact saved in  your address book online. When you submit those changes, a post request is sent conainting the new first name in the payload. Get requests don't include a payload.






HTTP RESPONSE FORMAT

Status-Line  ||   HTTP/[version] [status code] [status message]   ||   HTTP/1.1 200 OK

//200 level codes are generally success messages. 300 page moved. 404 not found. 500 server error.

Headers   ||   [Header Name]: [Header Value] (each on its own line)   || Server: nginx (line break) Date: Thu, 05 Nov 2015 19:57:23 GMT (line break) Content-Type: application/xml

Blank Line

Response body/payload



HTTP itself is a stateless protocol. Stateless means there's no record of previous interactions, and each interaction is processed with only the info that comes with that particular interaction. There is nothing inherent to http that allows it to remember a previous request and use it to inform a later one.






SENDING DATA WITH A GET REQUEST

GET requests sometimes require us to supply additional data related to the actual resource requested. Helps the server put together an accurate response - does not actually change anything on the server related to the resource. Often used in web forms to search a website.

ex:
telnet httpbin.org 80

GET /get?firstname=Chris&language=English HTTP/1.1
Host: httpbin.org

A query string is simply a sequence of name value pairs where the names and values are separated by an equal sign and the pairs are separated by ampersands. When using a query string in a uri, you start with a single question mark.






SENDING DATA WITH A POST REQUEST

the purpose of a post request is to make a change on the server - add, change, or delete data.

Include content length header in a post request to indicate the number of bytes we're transmitting
















GET AND POST REQUESTS IN A BROWSER

THE BROWSER AS A GUI FOR HTTP

Webpages communicate using http, so you can think of browsers as graphical user interfaces for http






INTRO TO CHROME DEVELOPER TOOLS

In the network tab in devtools, you can see http requests that have been made. Clicking on it will reveal the details of the http request and response.






HTML REVIEW AND URIS VS URLS

A URL is essentially a URI that also contains info about how to locate the resource. URLs explicitly or implicitly list http as the protocol for obtaining the resource, and also include the host name.






USING ANCHORS FOR GET REQUESTS

clicking on a link results in an http get request to the resource located at the relative url specified in the anchor's href attribute, which is combined with the current url to get an absolute url, which is then used in the get request.






USING FORMS FOR GET REQUESTS

1) form tags
<form></form>
2) form method attribute - optional, defaults to "get"
method="post" or method="get"
3) form action attribute
action=""
value is relative or absolute url that will be used when the form is submitted - where the data is sent
4) form elements for users to provide info
inside form tags is any number of input elements, which must have "name" attributes in order to be included in data sent when form is submitted
5) submit button - optional, triggered with ENTER
input or button element whose type="submit"

<form method="post" action="/register">
   <input type="text" name="username" placeholder="username">
</form>


from the form, a get request is constructed, with the name/value pairs being added to the uri (as a query string, ?name=value&name=value)






USING FORMS FOR POST REQUESTS

content type and content length headers are required

constructs payload as a query string using user input. may include URL encoded characters (%40 is @, %3A is :)




















