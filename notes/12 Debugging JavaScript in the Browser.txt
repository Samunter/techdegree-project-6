WHAT IS DEBUGGING?

The process of finding and resolving defects in software

take snapshots of variables with console.log() as the program runs. Awkward stopping starting switching windows, need to delete unnecessary code, doesn't stop the program so values may change later in the program and that can be confusing

Debugging
1. Stop execution at a given time
2. Explore values while the app is paused
3. Step through code, line by line
4. Fix bug

Debugger built into browser, Chrome DevTools.





BREAKING ON EVENTS AND BASIC STEPPING

more tools, developer tools. ctrl + shift + i
Sometimes needs a reset after opening

Overview of Sources tab in DevTools
-Left pane, file tree of assets the browser has downloaded
-Middle, contents of files
-Right, tools for debugging code

Set an Event Listener Breakpoint
-Example, expand list of Event Listener Breakpoints. Expand Control events, which includes events from form controls, and select Change.

All  variables and values in current scope
-Right pane under scope. List of the variables that exist in the current function scope. Will be undefined if they are defined in the current highlighted line of code or any subsequent lines

Step over button, seeing code execute line by line
-Arrow curved to the right. Executes each line of code. Can see variables be updated.

Changing value of a variable while program is paused
-Can change the value in the console. Back in the Sources tab, can step forward and see how this change is implemented

Diable/enable all breakpoints
-Flag pointing right. When breakpoints are enabled, Workspaces will also be frozen





BASIC AND CONDITIONAL LINE BREAKPOINTS

To set a breakpoint, click the line number where you want to break at. The play button unpauses the interpreter and lets it run until it reaches a breakpoint. You can also set a breakpoint for when a certain condition is met by right clicking the line number and selecting "Add conditional breakpoint."

example:

li.className !== 'responded'






DEBUGGING FUNCTIONS

Step over doesn't go into functions, it steps over them (executes and moves on). 

Step into jumps into the function on the selected line.

Call stack window is a visual representation of what functions are currently in the process of running, with the oldest function at the bottom and most recent at the top. When a function executes, it leaves the Call Stack list.

Scope shows the variables that this function has access to.

Step out allows you to complete the current function and jump back to the function that called it.





DEBUGGING AND EXCEPTION ERRORS

When an error occurs, you will see a red X in the upper right corner of DevTools. Once an error has been thrown the interpreter stops running, so we can't use tools to look through the call stack or the scope. You can set a breakpoint to just before the error occurs by clicking the Pause Exceptions button in the upper right corner.





BREAKING ON DOM CHANGES AND WATCH EXPRESSIONS

We can set breakpoints that trigger when the DOM changes. Right click the element and choose "Inspect," then in the Elements tab of DevTools right click the element and choose "Break on" and one of the three types of modifications ("subtree modifications" are changes to children of this element). The interpreter will pause before the change is made to the DOM (ex before an element is appended). Can then type the name of the element into the console to look at it.

Watch expressions keep us from having to type element names into the console over and over. On the Sources tab, click "Watch" in the right panel and then the plus symbol. You can type variable names, equality checks, object properties, anything that produces a value

In order to trigger a breakpoint on a dom change, be in the Elements tab
























