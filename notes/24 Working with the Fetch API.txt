WHAT IS THE FETCH API?

Most websites and applications retrieve and send information to and from a remote server using javascript. for example, make a request to an api and use the returned data to update the content of a page, or post data submitted by a form to a server.

you may have heard of or worked with AJAX, asynchronous javascript and xml. ajax provides a combination of technology that gives developers a way to send and receive data asynchronously, in the background, without reloading the page, which makes your website feel fast and responsive. A common way to make AJAX calls and interact with servers asynchronously is with the XMLHttpRequest object, or XHR, a javascript functionality built into the browser used to transfer data between the browser and a web server. well not only can xhr be a little too complex to write, read, and remember, developers can also end up writing some pretty messy code to make ajax calls. It can lead to callback hell.

developers also have the option of using jquery to perform ajax requests. jquery provides a wrapper around the xmlhttprequest object with a set of tools that make working with xhr easier across browsers.

instead of making requests with xhr, or loading a large external library like jquery, javascript now provides a modern and friendlier data fetching interface native to the browser, fetch api.






WRITE A BASIC FETCH REQUEST

the global fetch() method takes one mandatory argument, the path to the resource you want to fetch (like a url). 

there are many different methods to use on a response object. each lets you handles different response types.

https://developer.mozilla.org/en-US/docs/Web/API/Response#Methods

the fetch method also accepts an optional second parameter, an init options object you can use to customize the HTTP request. You can send a request with credentials included, or make a post request instead of the default get request.


fetch('https://dog.ceo/api/breeds/image/random')
  //since the arrow function is one line, the response is implicitly returned
  .then(response => response.json())
  .then(data => console.log(data.message))

//returns the url as a string

DISPLAYING THE CONTENT

CREATE A REUSABLE FETCH FUNCTION

HANDLING ERRORS

MANAGE MULTIPLE REQUESTS WITH PROMISE.ALL

POSTING DATA WITH FETCH()

const config = {
   method: 'POST',
   headers: {
      'Content-Type': 'application/json'
   },
   body: JSON.stringify({ name, comment })
}

fetch('https://jsonplaceholder.typicode.com/comments', config)
   .then(checkStatus)
   .then(res => res.json())
   .then(data => console.log(data))





















const select = document.getElementById('breeds');
const card = document.querySelector('.card'); 
const form = document.querySelector('form');

// ------------------------------------------
//  FETCH FUNCTIONS
// ------------------------------------------

function fetchData(url) {
  return fetch(url)
          .then(checkStatus)
          .then(res => res.json())
          .catch(error => console.log('Looks like there was a problem', error))
}

Promise.all([
  fetchData('https://dog.ceo/api/breeds/list'),
  fetchData('https://dog.ceo/api/breeds/image/random')

])
.then(data => {
  const breedList = data[0].message;
  const randomImage = data[1].message;
  
  generateOptions(breedList);
  generateImage(randomImage);
})

// ------------------------------------------
//  HELPER FUNCTIONS
// ------------------------------------------

function checkStatus(response) {
  if(response.ok) {
    return Promise.resolve(response);
  } else {
    return Promise.reject(new Error(response.statusText));
  }
}

function generateOptions(data) {
  const options = data.map(item => `
    <option value='${item}'>${item}</option>
  `).join('');
  select.innerHTML = options;
}

function generateImage(data) {
  const html = `
    <img src='${data}' alt>
    <p>Click to see images of ${select.value}s</p>
  `;
  card.innerHTML = html;
}

function fetchBreedImage() {
  const breed = select.value;
  const img = card.querySelector('img');
  const p = card.querySelector('p');
  
  fetchData(`https://dog.ceo/api/breed/${breed}/images/random`)
    .then(data => {
      img.src = data.message;
      img.alt = breed;
      p.textContent = `Click to view more ${breed}s`
    })
}


// ------------------------------------------
//  EVENT LISTENERS
// ------------------------------------------

select.addEventListener('change', fetchBreedImage);
card.addEventListener('click', fetchBreedImage);
form.addEventListener('submit', postData)


// ------------------------------------------
//  POST DATA
// ------------------------------------------

function postData(e) {
  e.preventDefault();
  const name = document.getElementById('name').value;
  const comment = document.getElementById('comment').value;
  
  const config = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({name: name, comment: comment })
  }
  
  fetch('https://jsonplaceholder.typicode.com/comments', config)
    .then(checkStatus)
    .then(res => res.json())
    .then(data => console.log(data))
}


