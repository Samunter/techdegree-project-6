INTRODUCTION TO CALLBACK FUNCTIONS

WHY CALLBACK FUNCTIONS?

to tell the instructions before using them. asynchronous programming. improves speed and performance





WHAT IS A CALLBACK?

a function passed into another function as a parameter





CREATING A SIMPLE CALLBACK FUNCTION

function sayHello() {
    console.log('Hello');
}

function executeCallback(callback) {
  callback();
}

executeCallback(sayHello);





ANONYMOUS FUNCTIONS

a function without a name. in the case of callback, an anonymous function can be written in place (or in-line) where the name of the function would be

function executeCallback(callback) {
  callback();
}

executeCallback(function () {
    console.log('Hello');
});

//same as before, but instead of passing the name of the function into executeCallback, we just write the function directly





ANONYMOUS FUNCTION AS ARROW FUNCTIONS

function executeCallback(callback) {
  callback();
}

executeCallback(() => console.log('Hello'));

//remove function keyword, add fat arrow, can remove curly braces because it is only one line of code














CALLBACKS WITH TIMERS

USING A ONE-OFF TIMER WITH SETTIMEOUT

Js has a built in function that will trigger a callback after a given period of time

setTimeout(callback, timeInMilliseconds);

//runs the function after given amount of time





USING A REPEAT TIMER WITH SETINTERVAL

setInterval(callback, timeInMilliseconds);

//runs the function after given delay, repeats














CALLBACKS AND THE DOM

CALLBACKS WITH ARGUMENTS

function executeCallback(element, callback) {
     callback(element);
}

example:

const div1 = document.getElementById('first');

function makeRed(element) {
     element.style.backgroundColor = "red";

function addStyleToElement(element, callback) {
     callback(element);
}

addStyleToElement(div1, makeRed);

//when the callback takes an argument, the function that executes the callback also needs to take that argument






USING CALLBACKS ON TEXT INPUTS

Event handler = function that is triggered by an event

event.target = elemnt that triggered the event

example:

document.getElementById('name').addEventListener('focus', event => {
  event.target.className = 'highlight';
});

//upon focus, the 'name' element has the class 'highlight' applied






USING THE SAME CALLBACK ON MULTIPLE ELEMENTS

don't repeat yourself! create a variable that stores the callback function









